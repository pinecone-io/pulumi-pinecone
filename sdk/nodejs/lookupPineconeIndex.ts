// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export function lookupPineconeIndex(args: LookupPineconeIndexArgs, opts?: pulumi.InvokeOptions): Promise<LookupPineconeIndexResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pinecone:index:lookupPineconeIndex", {
        "name": args.name,
    }, opts);
}

export interface LookupPineconeIndexArgs {
    /**
     * The name of the Pinecone index.
     */
    name: string;
}

export interface LookupPineconeIndexResult {
    /**
     * The dimensions of the vectors in the index. Defaults to 1536.
     */
    readonly dimension?: number;
    /**
     * The host of the index.
     */
    readonly host: string;
    /**
     * The metric used to compute the distance between vectors.
     */
    readonly metric: enums.IndexMetric;
    /**
     * The name of the Pinecone index.
     */
    readonly name: string;
    /**
     * Describe how the index should be deployed.
     */
    readonly spec: outputs.PineconeSpec;
    /**
     * The status of the index.
     */
    readonly status: boolean;
}
export function lookupPineconeIndexOutput(args: LookupPineconeIndexOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<LookupPineconeIndexResult> {
    return pulumi.output(args).apply((a: any) => lookupPineconeIndex(a, opts))
}

export interface LookupPineconeIndexOutputArgs {
    /**
     * The name of the Pinecone index.
     */
    name: pulumi.Input<string>;
}

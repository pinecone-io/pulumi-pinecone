// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PineconeIndex extends pulumi.CustomResource {
    /**
     * Get an existing PineconeIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): PineconeIndex {
        return new PineconeIndex(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pinecone:index:PineconeIndex';

    /**
     * Returns true if the given object is an instance of PineconeIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PineconeIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PineconeIndex.__pulumiType;
    }

    public /*out*/ readonly indexName!: pulumi.Output<string>;

    /**
     * Create a PineconeIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PineconeIndexArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.dimension === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dimension'");
            }
            if ((!args || args.metric === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metric'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.podType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'podType'");
            }
            if ((!args || args.pods === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pods'");
            }
            if ((!args || args.replicas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicas'");
            }
            resourceInputs["dimension"] = args ? args.dimension : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["podType"] = args ? args.podType : undefined;
            resourceInputs["pods"] = args ? args.pods : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["indexName"] = undefined /*out*/;
        } else {
            resourceInputs["indexName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PineconeIndex.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a PineconeIndex resource.
 */
export interface PineconeIndexArgs {
    /**
     * The dimensions of the vectors in the index.
     */
    dimension: pulumi.Input<number>;
    /**
     * The metric used to compute the distance between vectors.
     */
    metric: pulumi.Input<string>;
    /**
     * The name of the Pinecone index.
     */
    name: pulumi.Input<string>;
    /**
     * The type of pods to use for the index.
     */
    podType: pulumi.Input<string>;
    /**
     * The number of pods to use for the index.
     */
    pods: pulumi.Input<number>;
    /**
     * The number of replicas to use for the index.
     */
    replicas: pulumi.Input<number>;
}

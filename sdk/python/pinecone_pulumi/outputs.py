# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'MetaDataConfig',
    'PineconePodSpec',
    'PineconeServerlessSpec',
    'PineconeSpec',
]

@pulumi.output_type
class MetaDataConfig(dict):
    def __init__(__self__, *,
                 indexed: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] indexed:  Indexed By default, all metadata is indexed; to change this behavior, use this property to specify an array of metadata fields which should be indexed.
        """
        if indexed is not None:
            pulumi.set(__self__, "indexed", indexed)

    @property
    @pulumi.getter
    def indexed(self) -> Optional[Sequence[str]]:
        """
         Indexed By default, all metadata is indexed; to change this behavior, use this property to specify an array of metadata fields which should be indexed.
        """
        return pulumi.get(self, "indexed")


@pulumi.output_type
class PineconePodSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podType":
            suggest = "pod_type"
        elif key == "metaDataConfig":
            suggest = "meta_data_config"
        elif key == "sourceCollection":
            suggest = "source_collection"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PineconePodSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PineconePodSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PineconePodSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment: str,
                 pod_type: str,
                 replicas: int,
                 meta_data_config: Optional['outputs.MetaDataConfig'] = None,
                 pods: Optional[int] = None,
                 shards: Optional[int] = None,
                 source_collection: Optional[str] = None):
        """
        :param str environment: The environment where the index is hosted.
        :param str pod_type: The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
        :param int replicas: The number of replicas. Replicas duplicate your index. They provide higher availability and throughput. Replicas can be scaled up or down as your needs change.
        :param 'MetaDataConfig' meta_data_config: Configuration for the behavior of Pinecone's internal metadata index.
        :param int pods: The number of pods to be used in the index. This should be equal to `shards` x `replicas`.
        :param int shards: The number of shards. Shards split your data across multiple pods so you can fit more data into an index.
        :param str source_collection: The name of the collection to be used as the source for the index.
        """
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "pod_type", pod_type)
        pulumi.set(__self__, "replicas", replicas)
        if meta_data_config is not None:
            pulumi.set(__self__, "meta_data_config", meta_data_config)
        if pods is not None:
            pulumi.set(__self__, "pods", pods)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)
        if source_collection is not None:
            pulumi.set(__self__, "source_collection", source_collection)

    @property
    @pulumi.getter
    def environment(self) -> str:
        """
        The environment where the index is hosted.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="podType")
    def pod_type(self) -> str:
        """
        The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and one of `x1`, `x2`, `x4`, or `x8`.
        """
        return pulumi.get(self, "pod_type")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        """
        The number of replicas. Replicas duplicate your index. They provide higher availability and throughput. Replicas can be scaled up or down as your needs change.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="metaDataConfig")
    def meta_data_config(self) -> Optional['outputs.MetaDataConfig']:
        """
        Configuration for the behavior of Pinecone's internal metadata index.
        """
        return pulumi.get(self, "meta_data_config")

    @property
    @pulumi.getter
    def pods(self) -> Optional[int]:
        """
        The number of pods to be used in the index. This should be equal to `shards` x `replicas`.
        """
        return pulumi.get(self, "pods")

    @property
    @pulumi.getter
    def shards(self) -> Optional[int]:
        """
        The number of shards. Shards split your data across multiple pods so you can fit more data into an index.
        """
        return pulumi.get(self, "shards")

    @property
    @pulumi.getter(name="sourceCollection")
    def source_collection(self) -> Optional[str]:
        """
        The name of the collection to be used as the source for the index.
        """
        return pulumi.get(self, "source_collection")


@pulumi.output_type
class PineconeServerlessSpec(dict):
    def __init__(__self__, *,
                 cloud: 'ServerlessSpecCloud',
                 region: str):
        """
        :param 'ServerlessSpecCloud' cloud: The public cloud where you would like your index hosted.
        :param str region: The region where you would like your index to be created. Different cloud providers have different regions available.
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def cloud(self) -> 'ServerlessSpecCloud':
        """
        The public cloud where you would like your index hosted.
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region where you would like your index to be created. Different cloud providers have different regions available.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class PineconeSpec(dict):
    def __init__(__self__, *,
                 pod: Optional['outputs.PineconePodSpec'] = None,
                 serverless: Optional['outputs.PineconeServerlessSpec'] = None):
        """
        :param 'PineconePodSpec' pod: Configuration needed to deploy a pod index.
        :param 'PineconeServerlessSpec' serverless: Configuration needed to deploy a serverless index.
        """
        if pod is not None:
            pulumi.set(__self__, "pod", pod)
        if serverless is not None:
            pulumi.set(__self__, "serverless", serverless)

    @property
    @pulumi.getter
    def pod(self) -> Optional['outputs.PineconePodSpec']:
        """
        Configuration needed to deploy a pod index.
        """
        return pulumi.get(self, "pod")

    @property
    @pulumi.getter
    def serverless(self) -> Optional['outputs.PineconeServerlessSpec']:
        """
        Configuration needed to deploy a serverless index.
        """
        return pulumi.get(self, "serverless")



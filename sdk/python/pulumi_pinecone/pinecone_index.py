# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PineconeIndexArgs', 'PineconeIndex']

@pulumi.input_type
class PineconeIndexArgs:
    def __init__(__self__, *,
                 dimension: pulumi.Input[int],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 pod_type: pulumi.Input[str],
                 pods: pulumi.Input[int],
                 replicas: pulumi.Input[int]):
        """
        The set of arguments for constructing a PineconeIndex resource.
        :param pulumi.Input[int] dimension: The dimensions of the vectors in the index.
        :param pulumi.Input[str] metric: The metric used to compute the distance between vectors.
        :param pulumi.Input[str] name: The name of the Pinecone index.
        :param pulumi.Input[str] pod_type: The type of pods to use for the index.
        :param pulumi.Input[int] pods: The number of pods to use for the index.
        :param pulumi.Input[int] replicas: The number of replicas to use for the index.
        """
        pulumi.set(__self__, "dimension", dimension)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pod_type", pod_type)
        pulumi.set(__self__, "pods", pods)
        pulumi.set(__self__, "replicas", replicas)

    @property
    @pulumi.getter
    def dimension(self) -> pulumi.Input[int]:
        """
        The dimensions of the vectors in the index.
        """
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: pulumi.Input[int]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric used to compute the distance between vectors.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Pinecone index.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podType")
    def pod_type(self) -> pulumi.Input[str]:
        """
        The type of pods to use for the index.
        """
        return pulumi.get(self, "pod_type")

    @pod_type.setter
    def pod_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "pod_type", value)

    @property
    @pulumi.getter
    def pods(self) -> pulumi.Input[int]:
        """
        The number of pods to use for the index.
        """
        return pulumi.get(self, "pods")

    @pods.setter
    def pods(self, value: pulumi.Input[int]):
        pulumi.set(self, "pods", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        """
        The number of replicas to use for the index.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)


class PineconeIndex(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dimension: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pod_type: Optional[pulumi.Input[str]] = None,
                 pods: Optional[pulumi.Input[int]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a PineconeIndex resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] dimension: The dimensions of the vectors in the index.
        :param pulumi.Input[str] metric: The metric used to compute the distance between vectors.
        :param pulumi.Input[str] name: The name of the Pinecone index.
        :param pulumi.Input[str] pod_type: The type of pods to use for the index.
        :param pulumi.Input[int] pods: The number of pods to use for the index.
        :param pulumi.Input[int] replicas: The number of replicas to use for the index.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PineconeIndexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PineconeIndex resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PineconeIndexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PineconeIndexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dimension: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pod_type: Optional[pulumi.Input[str]] = None,
                 pods: Optional[pulumi.Input[int]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PineconeIndexArgs.__new__(PineconeIndexArgs)

            if dimension is None and not opts.urn:
                raise TypeError("Missing required property 'dimension'")
            __props__.__dict__["dimension"] = dimension
            if metric is None and not opts.urn:
                raise TypeError("Missing required property 'metric'")
            __props__.__dict__["metric"] = metric
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if pod_type is None and not opts.urn:
                raise TypeError("Missing required property 'pod_type'")
            __props__.__dict__["pod_type"] = pod_type
            if pods is None and not opts.urn:
                raise TypeError("Missing required property 'pods'")
            __props__.__dict__["pods"] = pods
            if replicas is None and not opts.urn:
                raise TypeError("Missing required property 'replicas'")
            __props__.__dict__["replicas"] = replicas
            __props__.__dict__["index_name"] = None
        super(PineconeIndex, __self__).__init__(
            'pinecone:index:PineconeIndex',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PineconeIndex':
        """
        Get an existing PineconeIndex resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PineconeIndexArgs.__new__(PineconeIndexArgs)

        __props__.__dict__["index_name"] = None
        return PineconeIndex(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "index_name")


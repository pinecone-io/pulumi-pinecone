# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = [
    'MetaDataConfigArgs',
    'PineconePodSpecArgs',
    'PineconeServerlessSpecArgs',
    'PineconeSpecArgs',
]

@pulumi.input_type
class MetaDataConfigArgs:
    def __init__(__self__, *,
                 indexed: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if indexed is not None:
            pulumi.set(__self__, "indexed", indexed)

    @property
    @pulumi.getter
    def indexed(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "indexed")

    @indexed.setter
    def indexed(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexed", value)


@pulumi.input_type
class PineconePodSpecArgs:
    def __init__(__self__, *,
                 environment: pulumi.Input[str],
                 pod_type: pulumi.Input[str],
                 replicas: pulumi.Input[int],
                 meta_data_config: Optional[pulumi.Input['MetaDataConfigArgs']] = None,
                 pods: Optional[pulumi.Input[int]] = None,
                 shards: Optional[pulumi.Input[int]] = None,
                 source_collection: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "pod_type", pod_type)
        pulumi.set(__self__, "replicas", replicas)
        if meta_data_config is not None:
            pulumi.set(__self__, "meta_data_config", meta_data_config)
        if pods is not None:
            pulumi.set(__self__, "pods", pods)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)
        if source_collection is not None:
            pulumi.set(__self__, "source_collection", source_collection)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="podType")
    def pod_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pod_type")

    @pod_type.setter
    def pod_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "pod_type", value)

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Input[int]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="metaDataConfig")
    def meta_data_config(self) -> Optional[pulumi.Input['MetaDataConfigArgs']]:
        return pulumi.get(self, "meta_data_config")

    @meta_data_config.setter
    def meta_data_config(self, value: Optional[pulumi.Input['MetaDataConfigArgs']]):
        pulumi.set(self, "meta_data_config", value)

    @property
    @pulumi.getter
    def pods(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pods")

    @pods.setter
    def pods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pods", value)

    @property
    @pulumi.getter
    def shards(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "shards")

    @shards.setter
    def shards(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shards", value)

    @property
    @pulumi.getter(name="sourceCollection")
    def source_collection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_collection")

    @source_collection.setter
    def source_collection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_collection", value)


@pulumi.input_type
class PineconeServerlessSpecArgs:
    def __init__(__self__, *,
                 cloud: pulumi.Input['ServerlessSpecCloud'],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def cloud(self) -> pulumi.Input['ServerlessSpecCloud']:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: pulumi.Input['ServerlessSpecCloud']):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class PineconeSpecArgs:
    def __init__(__self__, *,
                 pod: Optional[pulumi.Input['PineconePodSpecArgs']] = None,
                 serverless: Optional[pulumi.Input['PineconeServerlessSpecArgs']] = None):
        if pod is not None:
            pulumi.set(__self__, "pod", pod)
        if serverless is not None:
            pulumi.set(__self__, "serverless", serverless)

    @property
    @pulumi.getter
    def pod(self) -> Optional[pulumi.Input['PineconePodSpecArgs']]:
        return pulumi.get(self, "pod")

    @pod.setter
    def pod(self, value: Optional[pulumi.Input['PineconePodSpecArgs']]):
        pulumi.set(self, "pod", value)

    @property
    @pulumi.getter
    def serverless(self) -> Optional[pulumi.Input['PineconeServerlessSpecArgs']]:
        return pulumi.get(self, "serverless")

    @serverless.setter
    def serverless(self, value: Optional[pulumi.Input['PineconeServerlessSpecArgs']]):
        pulumi.set(self, "serverless", value)



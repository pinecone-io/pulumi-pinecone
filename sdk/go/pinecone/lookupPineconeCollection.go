// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinecone

import (
	"context"
	"reflect"

	"github.com/pinecone-io/pulumi-pinecone/sdk/go/pinecone/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The result of a get operation on a Pinecone collection.
func LookupPineconeCollection(ctx *pulumi.Context, args *LookupPineconeCollectionArgs, opts ...pulumi.InvokeOption) (*LookupPineconeCollectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPineconeCollectionResult
	err := ctx.Invoke("pinecone:index:lookupPineconeCollection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPineconeCollectionArgs struct {
	// The name of the Pinecone collection.
	Name string `pulumi:"name"`
}

// The result of a get operation on a Pinecone collection.
type LookupPineconeCollectionResult struct {
	// The dimension of the vectors stored in each record held in the collection.
	Dimension int `pulumi:"dimension"`
	// The environment where the collection is hosted.
	Environment string `pulumi:"environment"`
	// The name of the collection to be created.
	Name string `pulumi:"name"`
	// The size of the collection in bytes.
	Size int `pulumi:"size"`
	// The name of the index to be used as the source for the collection.
	Source string `pulumi:"source"`
	// The number of records stored in the collection.
	VectorCount int `pulumi:"vectorCount"`
}

func LookupPineconeCollectionOutput(ctx *pulumi.Context, args LookupPineconeCollectionOutputArgs, opts ...pulumi.InvokeOption) LookupPineconeCollectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPineconeCollectionResult, error) {
			args := v.(LookupPineconeCollectionArgs)
			r, err := LookupPineconeCollection(ctx, &args, opts...)
			var s LookupPineconeCollectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPineconeCollectionResultOutput)
}

type LookupPineconeCollectionOutputArgs struct {
	// The name of the Pinecone collection.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupPineconeCollectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPineconeCollectionArgs)(nil)).Elem()
}

// The result of a get operation on a Pinecone collection.
type LookupPineconeCollectionResultOutput struct{ *pulumi.OutputState }

func (LookupPineconeCollectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPineconeCollectionResult)(nil)).Elem()
}

func (o LookupPineconeCollectionResultOutput) ToLookupPineconeCollectionResultOutput() LookupPineconeCollectionResultOutput {
	return o
}

func (o LookupPineconeCollectionResultOutput) ToLookupPineconeCollectionResultOutputWithContext(ctx context.Context) LookupPineconeCollectionResultOutput {
	return o
}

// The dimension of the vectors stored in each record held in the collection.
func (o LookupPineconeCollectionResultOutput) Dimension() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPineconeCollectionResult) int { return v.Dimension }).(pulumi.IntOutput)
}

// The environment where the collection is hosted.
func (o LookupPineconeCollectionResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPineconeCollectionResult) string { return v.Environment }).(pulumi.StringOutput)
}

// The name of the collection to be created.
func (o LookupPineconeCollectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPineconeCollectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The size of the collection in bytes.
func (o LookupPineconeCollectionResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPineconeCollectionResult) int { return v.Size }).(pulumi.IntOutput)
}

// The name of the index to be used as the source for the collection.
func (o LookupPineconeCollectionResultOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPineconeCollectionResult) string { return v.Source }).(pulumi.StringOutput)
}

// The number of records stored in the collection.
func (o LookupPineconeCollectionResultOutput) VectorCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPineconeCollectionResult) int { return v.VectorCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPineconeCollectionResultOutput{})
}

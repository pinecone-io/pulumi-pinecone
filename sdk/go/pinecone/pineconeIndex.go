// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pinecone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pinecone-io/pulumi-pinecone/sdk/go/pinecone/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PineconeIndex struct {
	pulumi.CustomResourceState

	// The dimensions of the vectors in the index. Defaults to 1536.
	Dimension pulumi.IntPtrOutput `pulumi:"dimension"`
	// The URL address where the index is hosted.
	Host pulumi.StringOutput `pulumi:"host"`
	// The metric used to compute the distance between vectors.
	Metric IndexMetricOutput `pulumi:"metric"`
	// The name of the Pinecone index.
	Name pulumi.StringOutput `pulumi:"name"`
	// Describe how the index should be deployed.
	Spec PineconeSpecOutput `pulumi:"spec"`
}

// NewPineconeIndex registers a new resource with the given unique name, arguments, and options.
func NewPineconeIndex(ctx *pulumi.Context,
	name string, args *PineconeIndexArgs, opts ...pulumi.ResourceOption) (*PineconeIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PineconeIndex
	err := ctx.RegisterResource("pinecone:index:PineconeIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPineconeIndex gets an existing PineconeIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPineconeIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PineconeIndexState, opts ...pulumi.ResourceOption) (*PineconeIndex, error) {
	var resource PineconeIndex
	err := ctx.ReadResource("pinecone:index:PineconeIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PineconeIndex resources.
type pineconeIndexState struct {
}

type PineconeIndexState struct {
}

func (PineconeIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*pineconeIndexState)(nil)).Elem()
}

type pineconeIndexArgs struct {
	// The dimensions of the vectors in the index. Defaults to 1536.
	Dimension *int `pulumi:"dimension"`
	// The metric used to compute the distance between vectors.
	Metric IndexMetric `pulumi:"metric"`
	// The name of the Pinecone index.
	Name string `pulumi:"name"`
	// Describe how the index should be deployed.
	Spec PineconeSpec `pulumi:"spec"`
}

// The set of arguments for constructing a PineconeIndex resource.
type PineconeIndexArgs struct {
	// The dimensions of the vectors in the index. Defaults to 1536.
	Dimension pulumi.IntPtrInput
	// The metric used to compute the distance between vectors.
	Metric IndexMetricInput
	// The name of the Pinecone index.
	Name pulumi.StringInput
	// Describe how the index should be deployed.
	Spec PineconeSpecInput
}

func (PineconeIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pineconeIndexArgs)(nil)).Elem()
}

type PineconeIndexInput interface {
	pulumi.Input

	ToPineconeIndexOutput() PineconeIndexOutput
	ToPineconeIndexOutputWithContext(ctx context.Context) PineconeIndexOutput
}

func (*PineconeIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**PineconeIndex)(nil)).Elem()
}

func (i *PineconeIndex) ToPineconeIndexOutput() PineconeIndexOutput {
	return i.ToPineconeIndexOutputWithContext(context.Background())
}

func (i *PineconeIndex) ToPineconeIndexOutputWithContext(ctx context.Context) PineconeIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PineconeIndexOutput)
}

// PineconeIndexArrayInput is an input type that accepts PineconeIndexArray and PineconeIndexArrayOutput values.
// You can construct a concrete instance of `PineconeIndexArrayInput` via:
//
//	PineconeIndexArray{ PineconeIndexArgs{...} }
type PineconeIndexArrayInput interface {
	pulumi.Input

	ToPineconeIndexArrayOutput() PineconeIndexArrayOutput
	ToPineconeIndexArrayOutputWithContext(context.Context) PineconeIndexArrayOutput
}

type PineconeIndexArray []PineconeIndexInput

func (PineconeIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PineconeIndex)(nil)).Elem()
}

func (i PineconeIndexArray) ToPineconeIndexArrayOutput() PineconeIndexArrayOutput {
	return i.ToPineconeIndexArrayOutputWithContext(context.Background())
}

func (i PineconeIndexArray) ToPineconeIndexArrayOutputWithContext(ctx context.Context) PineconeIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PineconeIndexArrayOutput)
}

// PineconeIndexMapInput is an input type that accepts PineconeIndexMap and PineconeIndexMapOutput values.
// You can construct a concrete instance of `PineconeIndexMapInput` via:
//
//	PineconeIndexMap{ "key": PineconeIndexArgs{...} }
type PineconeIndexMapInput interface {
	pulumi.Input

	ToPineconeIndexMapOutput() PineconeIndexMapOutput
	ToPineconeIndexMapOutputWithContext(context.Context) PineconeIndexMapOutput
}

type PineconeIndexMap map[string]PineconeIndexInput

func (PineconeIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PineconeIndex)(nil)).Elem()
}

func (i PineconeIndexMap) ToPineconeIndexMapOutput() PineconeIndexMapOutput {
	return i.ToPineconeIndexMapOutputWithContext(context.Background())
}

func (i PineconeIndexMap) ToPineconeIndexMapOutputWithContext(ctx context.Context) PineconeIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PineconeIndexMapOutput)
}

type PineconeIndexOutput struct{ *pulumi.OutputState }

func (PineconeIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PineconeIndex)(nil)).Elem()
}

func (o PineconeIndexOutput) ToPineconeIndexOutput() PineconeIndexOutput {
	return o
}

func (o PineconeIndexOutput) ToPineconeIndexOutputWithContext(ctx context.Context) PineconeIndexOutput {
	return o
}

// The dimensions of the vectors in the index. Defaults to 1536.
func (o PineconeIndexOutput) Dimension() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PineconeIndex) pulumi.IntPtrOutput { return v.Dimension }).(pulumi.IntPtrOutput)
}

// The URL address where the index is hosted.
func (o PineconeIndexOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *PineconeIndex) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The metric used to compute the distance between vectors.
func (o PineconeIndexOutput) Metric() IndexMetricOutput {
	return o.ApplyT(func(v *PineconeIndex) IndexMetricOutput { return v.Metric }).(IndexMetricOutput)
}

// The name of the Pinecone index.
func (o PineconeIndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PineconeIndex) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Describe how the index should be deployed.
func (o PineconeIndexOutput) Spec() PineconeSpecOutput {
	return o.ApplyT(func(v *PineconeIndex) PineconeSpecOutput { return v.Spec }).(PineconeSpecOutput)
}

type PineconeIndexArrayOutput struct{ *pulumi.OutputState }

func (PineconeIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PineconeIndex)(nil)).Elem()
}

func (o PineconeIndexArrayOutput) ToPineconeIndexArrayOutput() PineconeIndexArrayOutput {
	return o
}

func (o PineconeIndexArrayOutput) ToPineconeIndexArrayOutputWithContext(ctx context.Context) PineconeIndexArrayOutput {
	return o
}

func (o PineconeIndexArrayOutput) Index(i pulumi.IntInput) PineconeIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PineconeIndex {
		return vs[0].([]*PineconeIndex)[vs[1].(int)]
	}).(PineconeIndexOutput)
}

type PineconeIndexMapOutput struct{ *pulumi.OutputState }

func (PineconeIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PineconeIndex)(nil)).Elem()
}

func (o PineconeIndexMapOutput) ToPineconeIndexMapOutput() PineconeIndexMapOutput {
	return o
}

func (o PineconeIndexMapOutput) ToPineconeIndexMapOutputWithContext(ctx context.Context) PineconeIndexMapOutput {
	return o
}

func (o PineconeIndexMapOutput) MapIndex(k pulumi.StringInput) PineconeIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PineconeIndex {
		return vs[0].(map[string]*PineconeIndex)[vs[1].(string)]
	}).(PineconeIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PineconeIndexInput)(nil)).Elem(), &PineconeIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*PineconeIndexArrayInput)(nil)).Elem(), PineconeIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PineconeIndexMapInput)(nil)).Elem(), PineconeIndexMap{})
	pulumi.RegisterOutputType(PineconeIndexOutput{})
	pulumi.RegisterOutputType(PineconeIndexArrayOutput{})
	pulumi.RegisterOutputType(PineconeIndexMapOutput{})
}

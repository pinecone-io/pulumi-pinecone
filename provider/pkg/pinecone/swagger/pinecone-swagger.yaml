openapi: 3.0.3
info:
  title: Pineonce.io Public API
  description: >-
    Pinecone is a vector database that makes it easy to search and retrieve
    billions of high-dimensional vectors.
  version: '1.0'
tags:
  - name: Manage Serverless Indexes
  - name: Manage Pod Indexes
servers:
  - url: 'https://api.pinecone.io'
paths:
  /collections:
    get:
      operationId: list_collections
      description: This operation returns a list of your Pinecone collections.
      responses:
        '200':
          description: >-
            This operation returns a list of all the collections in your current
            project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
              examples:
                multiple-collections:
                  summary: 'Multiple collections with different states'
                  value:
                    collections:
                      - name: 'small-collection'
                        size: 3126700
                        status: 'Ready'
                        dimension: 3
                        record_count: 99
                      - name: 'small-collection-new'
                        size: 3126700
                        status: 'Initializing'
                        dimension: 3
                        record_count: 99
                      - name: 'big-collection'
                        size: 160087040000000
                        status: 'Ready'
                        dimension: 1536
                        record_count: 10000000
                no-collections:
                  summary: 'No collections created yet'
                  value:
                    collections: []

      tags:
        - Manage Pod Indexes
    post:
      operationId: create_collection
      description: This operation creates a Pinecone collection.
      requestBody:
        description: The desired configuration for the collection.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
            examples:
              creating-collection:
                summary: Creating a collection
                value:
                  name: 'example-collection'
                  source: 'example-source-index'
      responses:
        '201':
          description: The collection has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModel'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '405':
          $ref: '#/components/responses/405MethodNotSupportedForServerless'
        '409':
          description: A collection already exists with the name provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Manage Pod Indexes
    servers:
      - url: 'https://api.pinecone.io'

  '/collections/{collection_name}':
    get:
      operationId: describe_collection
      description: This operation gets a description of a collection.
      parameters:
        - name: collection_name
          required: true
          in: path
          description: The name of the collection to be described
          schema:
            type: string
          example: 'test-collection'
      responses:
        '200':
          description: Configuration information and deployment status of the collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModel'
              examples:
                tiny-collection:
                  summary: 'A small collection'
                  value:
                    name: 'tiny-collection'
                    size: 3126700
                    status: 'Ready'
                    dimension: 3
                    record_count: 99
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404CollectionNotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Manage Pod Indexes
    delete:
      operationId: delete_collection
      description: This operation deletes an existing collection.
      parameters:
        - name: collection_name
          required: true
          in: path
          schema:
            type: string
          description: The name of the collection
          example: 'test-collection'
      responses:
        '202':
          description: The index has been successfully deleted.
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404CollectionNotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Manage Pod Indexes
    servers:
      - url: 'https://api.pinecone.io'

  /indexes:
    get:
      operationId: list_indexes
      description: This operation returns a list of your Pinecone indexes.
      responses:
        '200':
          description: >-
            This operation returns a list of all the indexes that you have
            previously created, and which are associated with the given project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexList'
              examples:
                multiple-indexes:
                  summary: 'A list containing one serverless index and one pod index'
                  value:
                    indexes:
                      - name: 'semantic-search'
                        dimension: 384
                        metric: 'cosine'
                        host: 'semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io'
                        status:
                          ready: true
                          state: 'Ready'
                        spec:
                          pod:
                            environment: 'us-west1-gcp'
                            replicas: 2
                            shards: 2
                            pod_type: 'p1.x1'
                            pods: 4
                      - name: 'image-search'
                        dimension: 200
                        metric: 'dotproduct'
                        host: 'image-search-a31f9c1.svc.us-east1-gcp.pinecone.io'
                        status:
                          ready: false
                          state: 'Initializing'
                        spec:
                          serverless:
                            cloud: 'gcp'
                            region: 'us-east1'
                one-index:
                  summary: 'A list containing one serverless index'
                  value:
                    indexes:
                      - name: 'movie-embeddings'
                        dimension: 1536
                        metric: 'cosine'
                        host: 'movie-embeddings-c01b5b5.svc.us-east1-gcp.pinecone.io'
                        status:
                          ready: false
                          state: 'Initializing'
                        spec:
                          serverless:
                            cloud: 'gcp'
                            region: 'us-east1'
                no-indexes:
                  summary: 'No indexes created yet'
                  value:
                    indexes: []
        '401':
          $ref: '#/components/responses/401Unauthorized'
      tags:
        - Manage Serverless Indexes
        - Manage Pod Indexes
    post:
      operationId: create_index
      description: >-
        This operation deploys a Pinecone index. This is where you specify the
        measure of similarity, the dimension of vectors to be stored in the
        index, which cloud provider you would like to deploy with, and more.
      requestBody:
        description: The desired configuration for the index.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIndexRequest'
            examples:
              serverless-index:
                summary: Creating a serverless index
                value:
                  name: 'movie-recommendations'
                  dimension: 1536
                  metric: 'cosine'
                  spec:
                    serverless:
                      cloud: 'gcp'
                      region: 'us-east1'
              pod-index:
                summary: Creating a pod index
                value:
                  name: 'movie-recommendations'
                  dimension: 1536
                  metric: 'cosine'
                  spec:
                    pod:
                      environment: 'us-east-1-aws'
                      replicas: 1
                      shards: 1
                      pod_type: 'p1.x1'
                      pods: 1
                      metadata_config:
                        indexed:
                          - 'genre'
                          - 'title'
                          - 'imdb_rating'
                      source_collection: 'movie-embeddings'
      responses:
        '201':
          description: The index has been successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexModel'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429QuotaExceeded'
        '409':
          description: Index of given name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Manage Serverless Indexes
        - Manage Pod Indexes
    servers:
      - url: 'https://api.pinecone.io'

  '/indexes/{index_name}':
    get:
      operationId: describe_index
      description: Get a description of an index.
      parameters:
        - name: index_name
          required: true
          in: path
          description: The name of the index to be described
          example: 'test-index'
          schema:
            type: string
      responses:
        '200':
          description: Configuration information and deployment status of the index
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexModel'
              examples:
                movie-recommendations-serverless:
                  summary: A serverless index
                  value:
                    name: 'movie-recommendations'
                    dimension: 1536
                    metric: 'cosine'
                    host: 'movie-recommendations-c01b5b5.svc.us-east1-gcp.pinecone.io'
                    status:
                      ready: false
                      state: 'Initializing'
                    spec:
                      serverless:
                        cloud: 'gcp'
                        region: 'us-east1'
                movie-recommendations-pod:
                  summary: A pod index
                  value:
                    name: 'movie-recommendations'
                    dimension: 1536
                    metric: 'cosine'
                    status:
                      ready: false
                      state: 'Initializing'
                    spec:
                      pod:
                        environment: 'us-east-1-aws'
                        replicas: 1
                        shards: 1
                        pod_type: 'p1.x1'
                        pods: 1
                        metadata_config:
                          indexed:
                            - 'genre'
                            - 'title'
                            - 'imdb_rating'
          links:
            UpsertVector:
              operationId: upsert
              server:
                url: $response.body#/host
            UpdateVector:
              operationId: update
              server:
                url: $response.body#/host
            QueryVector:
              operationId: query
              server:
                url: $response.body#/host
            FetchVector:
              operationId: fetch
              server:
                url: $response.body#/host
            DeleteOneVector:
              operationId: delete1
              server:
                url: $response.body#/host
            DeleteVector:
              operationId: delete
              server:
                url: $response.body#/host
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404IndexNotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Manage Serverless Indexes
        - Manage Pod Indexes
    delete:
      operationId: delete_index
      description: This operation deletes an existing index.
      parameters:
        - name: index_name
          required: true
          in: path
          schema:
            type: string
          example: 'test-index'
          description: The name of the index to delete
      responses:
        '202':
          description: The request to delete the index has been accepted.
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404IndexNotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Manage Serverless Indexes
        - Manage Pod Indexes
    patch:
      operationId: configure_index
      description: >-
        This operation specifies the pod type and number of replicas for an
        index.
      parameters:
        - name: index_name
          required: true
          in: path
          example: 'test-index'
          schema:
            type: string
          description: The name of the index to configure
      requestBody:
        description: The desired pod type and replica configuration for the index.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigureIndexRequest'
            examples:
              vertical-scaling:
                summary: Vertical scaling with pod type
                value:
                  spec:
                    pod:
                      pod_type: 'p1.x1'
              horizontal-scaling:
                summary: Horizontal scaling with replicas
                value:
                  spec:
                    pod:
                      replicas: 4
              scaling-both:
                summary: Scaling both pod type and number of replicas
                value:
                  spec:
                    pod:
                      pod_type: 'p1.x1'
                      replicas: 4
      responses:
        '202':
          description: >-
            The request to configure the index has been accepted. Check the 
            index status to see when the change has been applied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexModel'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '404':
          $ref: '#/components/responses/404IndexNotFound'
        '405':
          $ref: '#/components/responses/405MethodNotSupportedForServerless'
        '422':
          $ref: '#/components/responses/422UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429QuotaExceeded'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      tags:
        - Manage Pod Indexes
    servers:
      - url: 'https://api.pinecone.io'
components:
  schemas:
    # Data Models
    IndexModel:
      type: object
      description: >-
        The IndexModel describes the configuration and deployment status of a
        Pinecone index.
      required:
        - name
        - dimension
        - metric
        - status
        - spec
        - host
      properties:
        name:
          $ref: '#/components/schemas/IndexName'
        dimension:
          $ref: '#/components/schemas/IndexDimension'
        metric:
          $ref: '#/components/schemas/IndexMetric'
        host:
          $ref: '#/components/schemas/IndexHost'
        spec:
          type: object
          properties:
            pod:
              $ref: '#/components/schemas/PodSpec'
            serverless:
              $ref: '#/components/schemas/ServerlessSpec'
          example:
            pod:
              environment: 'us-east-1-aws'
              replicas: 1
              shards: 1
              pod_type: 'p1.x1'
              pods: 1
              metadata_config:
                indexed:
                  - 'genre'
                  - 'title'
                  - 'imdb_rating'
        status:
          type: object
          required:
            - ready
            - state
          example:
            ready: true
            state: 'ScalingUpPodSize'
          properties:
            ready:
              type: boolean
            state:
              type: string
              enum:
                - Initializing
                - InitializationFailed
                - ScalingUp
                - ScalingDown
                - ScalingUpPodSize
                - ScalingDownPodSize
                - Terminating
                - Ready

    CollectionModel:
      type: object
      description: >-
        The CollectionModel describes the configuration and status of a
        Pinecone collection.
      required:
        - name
        - size
        - status
        - dimension
        - record_count
      properties:
        name:
          type: string
          example: example-collection
        size:
          type: integer
          description: The size of the collection in bytes.
          example: 10000000
          format: int64
        status:
          type: string
          description: The status of the collection.
          enum:
            - Initializing
            - Ready
            - Terminating
          example: Initializing
        dimension:
          type: integer
          description: The dimension of the vectors stored in each record held in the collection
          example: 1536
          minimum: 1
          maximum: 2000
          format: int32
        record_count:
          type: integer
          example: 120000
          format: int32
          description: The number of records stored in the collection
        environment:
          type: string
          description: >-
            The environment where the collection is hosted.
          example: 'us-east1-gcp'

    # Properties of the IndexModel
    IndexMetric:
      type: string
      description: >-
        The distance metric to be used for similarity search. You can use
        'euclidean', 'cosine', or 'dotproduct'.
      enum:
        - cosine
        - euclidean
        - dotproduct
    IndexName:
      type: string
      description: >-
        The name of the index. The maximum length is 45 characters. 
        It may contain lowercase alphanumeric characters or hyphens, 
        and must not begin or end with a hyphen.
      example: example-index
    IndexDimension:
      type: integer
      description: The dimensions of the vectors to be inserted in the index
      minimum: 1
      maximum: 20000
      example: 1536
      format: int32
    IndexHost:
      type: string
      description: >-
        The URL address where the index is hosted.
      example: 'semantic-search-c01b5b5.svc.us-west1-gcp.pinecone.io'

    # Properties of the spec object for pod indexes
    PodSpec:
      type: object
      description: Configuration needed to deploy a pod index
      required:
        - environment
        - pods
        - replicas
        - shards
        - pod_type
      example:
        environment: 'us-east1-gcp'
        replicas: 1
        shards: 1
        pod_type: 'p1.x1'
        pods: 1
        metadata_config:
          indexed:
            - 'genre'
            - 'title'
            - 'imdb_rating'
        source_collection: 'movie-embeddings'
      properties:
        environment:
          type: string
          description: >-
            The environment where the index is hosted.
          example: 'us-east1-gcp'
        replicas:
          $ref: '#/components/schemas/PodSpecReplicas'
        shards:
          $ref: '#/components/schemas/PodSpecShards'
        pod_type:
          $ref: '#/components/schemas/PodSpecPodType'
        pods:
          type: integer
          description: 'The number of pods to be used in the index. This should be equal to `shards` x `replicas`.'
          default: 1
          example: 1
          minimum: 1
        metadata_config:
          type: object
          description: >-
            Configuration for the behavior of Pinecone's internal metadata index. By
            default, all metadata is indexed; when `metadata_config` is present,
            only specified metadata fields are indexed. These configurations are
            only valid for use with pod indexes.
          properties:
            indexed:
              type: array
              description: >-
                By default, all metadata is indexed; to change this behavior, use
                this property to specify an array of metadata fields which should be
                indexed.
              items:
                type: string
          example:
            indexed:
              - 'genre'
              - 'title'
              - 'imdb_rating'
        source_collection:
          type: string
          description: >-
            The name of the collection to be used as the source for the index.
          example: 'movie-embeddings'
    PodSpecPodType:
      type: string
      description: >-
        The type of pod to use. One of `s1`, `p1`, or `p2` appended with `.` and
        one of `x1`, `x2`, `x4`, or `x8`.
      default: p1.x1
      # enum:
      #   - s1.x1
      #   - s1.x2
      #   - s1.x4
      #   - s1.x8
      #   - p1.x1
      #   - p1.x2
      #   - p1.x4
      #   - p1.x8
      #   - p2.x1
      #   - p2.x2
      #   - p2.x4
      #   - p2.x8
    PodSpecReplicas:
      type: integer
      format: int32
      description: >-
        The number of replicas. Replicas duplicate your index. They provide
        higher availability and throughput. Replicas can be scaled up or down
        as your needs change.
      default: 1
      minimum: 1
    PodSpecShards:
      type: integer
      format: int32
      description: >-
        The number of shards. Shards split your data across multiple pods so you
        can fit more data into an index.
      default: 1
      minimum: 1

    # Properties of the spec object for serverless indexes
    ServerlessSpec:
      type: object
      required:
        - cloud
        - region
      description: Configuration needed to deploy a serverless index
      properties:
        cloud:
          type: string
          enum:
            - gcp
            - aws
            - azure
          description: The public cloud where you would like your index hosted
          example: gcp
        region:
          type: string
          description: >-
            The region where you would like your index to be created.
            Different cloud providers have different regions available. 
            See AwsRegions and GcpRegions for a list of available options.
          example: us-west1
    AwsRegions:
      type: string
      description: Regions available with the AWS cloud provider
      enum:
        - us-east-1
        - us-west-1
        - us-west-2
    GcpRegions:
      type: string
      description: Regions available with the GCP cloud provider
      enum:
        - us-west1
        - us-west2
        - eu-west4
        - northamerica-northeast1
        - asia-northeast1
        - asia-southeast1C

    # Shape of error responses
    ErrorResponse:
      type: object
      description: The response shape used for all error responses
      required:
        - status
        - error
      properties:
        status:
          type: integer
          description: The HTTP status code of the error
          example: 500
        error:
          type: object
          description: Detailed information about the error that occurred
          required:
            - code
            - message
          properties:
            code:
              type: string
              enum:
                - QUOTA_EXCEEDED
                - BAD_PARAMS
                - CANCELLED
                - UNKNOWN
                - INVALID_ARGUMENT
                - DEADLINE_EXCEEDED
                - NOT_FOUND
                - ALREADY_EXISTS
                - PERMISSION_DENIED
                - UNAUTHENTICATED
                - RESOURCE_EXHAUSTED
                - FAILED_PRECONDITION
                - ABORTED
                - OUT_OF_RANGE
                - UNIMPLEMENTED
                - INTERNAL
                - UNAVAILABLE
                - DATA_LOSS
            message:
              type: string
              example: Index name must contain only lowercase alphanumeric characters or hyphens, and must not begin or end with a hyphen.
            details:
              description: >-
                Additional information about the error. This field is not
                guaranteed to be present.
              type: object
          example:
            code: 'INVALID_ARGUMENT'
            message: 'Index name must contain only lowercase alphanumeric characters or hyphens, and must not begin or end with a hyphen.'
      example:
        status: 429
        error:
          code: 'QUOTA_EXCEEDED'
          message: 'The index exceeds the project quota of 5 pods by 2 pods. Upgrade your account or change the project settings to increase the quota.'

    IndexList:
      type: object
      description: The list of indexes that exist in the project.
      properties:
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/IndexModel'

    CollectionList:
      type: object
      description: The list of collections that exist in the project.
      properties:
        collections:
          type: array
          items:
            $ref: '#/components/schemas/CollectionModel'

    # Request bodies
    CreateIndexRequest:
      type: object
      description: >-
        The configuration needed to create a Pinecone index.
      required:
        - name
        - dimension
        - metric
        - spec
      properties:
        name:
          $ref: '#/components/schemas/IndexName'
        dimension:
          $ref: '#/components/schemas/IndexDimension'
        metric:
          $ref: '#/components/schemas/IndexMetric'
        spec:
          type: object
          description: Spec objects describe how the index should be deployed
          additionalProperties: false
          properties:
            serverless:
              $ref: '#/components/schemas/ServerlessSpec'
            pod:
              $ref: '#/components/schemas/PodSpec'
          oneOf:
            - required: [serverless]
            - required: [pod]
    CreateCollectionRequest:
      type: object
      description: >-
        The configuration needed to create a Pinecone collection.
      required:
        - name
        - source
      properties:
        name:
          type: string
          description: The name of the collection to be created.
          example: example-collection
        source:
          type: string
          description: The name of the index to be used as the source for the collection.
          example: example-source-index
    ConfigureIndexRequest:
      type: object
      description: >-
        Configuration used to scale an index.
      required: ['spec']
      properties:
        spec:
          type: object
          required: ['pod']
          properties:
            pod:
              type: object
              properties:
                replicas:
                  $ref: '#/components/schemas/PodSpecReplicas'
                pod_type:
                  $ref: '#/components/schemas/PodSpecPodType'

  responses:
    '400BadRequest':
      description: Bad request. The request body included invalid request parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            index-metric-validation-error:
              summary: 'Validation error on metric'
              value:
                status: 400
                error:
                  code: 'INVALID_ARGUMENT'
                  message: 'Metric must be one of cosine, euclidean, or dotproduct.'
    '401Unauthorized':
      description: 'Unauthorized. Possible causes: Invalid API key.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorized:
              summary: 'Unauthorized'
              value:
                status: 401
                error:
                  code: 'UNAUTHENTICATED'
                  message: 'Invalid API key.'
    '404IndexNotFound':
      description: Index not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            index-not-found:
              summary: 'Index not found'
              value:
                status: 404
                error:
                  code: 'NOT_FOUND'
                  message: 'Index example-index not found'
    '404CollectionNotFound':
      description: Collection not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            collection-not-found:
              summary: 'Collection not found'
              value:
                status: 404
                error:
                  code: 'NOT_FOUND'
                  message: 'Collection example-collection not found'
    '405MethodNotSupportedForServerless':
      description: >-
        The requested operation is not supported for serverless indexes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            serverless-unsupported:
              summary: 'Serverless indexes do not support this operation'
              value:
                status: 405
                error:
                  code: METHOD_NOT_AVAILABLE
                  message: 'The requested operation is not supported for serverless indexes.'
    '422UnprocessableEntity':
      description: >-
        Unprocessable entity. The request body could not be deserialized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missing-field:
              summary: 'Unprocessable entity'
              value:
                status: 422
                error:
                  code: 'INVALID_ARGUMENT'
                  message: 'Failed to deserialize the JSON body into the target type: missing field `metric` at line 1 column 16'
    '429QuotaExceeded':
      description: Not enough available quota to complete this operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            quota-exceeded:
              summary: 'Quota exceeded'
              value:
                status: 429
                error:
                  code: 'QUOTA_EXCEEDED'
                  message: 'The index exceeds the project quota of 5 pods by 2 pods. Upgrade your account or change the project settings to increase the quota.'
    '500InternalServerError':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            internal-server-error:
              summary: 'Internal server error'
              value:
                status: 500
                error:
                  code: 'UNKNOWN'
                  message: 'Internal server error'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Api-Key
      in: header

security:
  - ApiKeyAuth: []
externalDocs:
  description: More Pinecone.io API docs
  url: 'https://www.pinecone.io/docs'
